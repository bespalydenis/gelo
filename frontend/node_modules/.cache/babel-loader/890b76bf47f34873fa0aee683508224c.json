{"ast":null,"code":"import _objectSpread from \"/Applications/MAMP/htdocs/raps/gelo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/raps/gelo/frontend/src/components/Auth/ConfirmationTypes/StepsVerification.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { login, setUserStatus, receiveUserData, requestUserData } from \"../../../store/actions\";\nimport * as icons from '../../../assets';\nimport '../index.scss';\nimport Step1 from './Step/Step1';\nimport Step2 from './Step/Step2';\nimport Step3 from './Step/Step3';\nimport Step4 from './Step/Step4';\nimport Select from 'react-select';\n\nclass EmailVerification extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userStatus: this.props.userStatus,\n      isAvailable: '' || this.props.user.isAvailable\n    };\n  }\n\n  componentDidMount() {\n    this.props.requestUserData(this.props.userID);\n  }\n\n  render() {\n    const options = [{\n      value: 'chocolate',\n      label: 'Chocolate'\n    }, {\n      value: 'strawberry',\n      label: 'Strawberry'\n    }, {\n      value: 'vanilla',\n      label: 'Vanilla'\n    }];\n    console.log(\">> DATA INFO\", this.props.user);\n    const customStyles = {\n      option: (provided, {\n        data,\n        isDisabled,\n        isSelected,\n        isFocused\n      }) => _objectSpread({}, provided, {\n        height: 40,\n        backgroundColor: isDisabled ? null : isSelected ? '#F4F8FF' : null,\n        color: isSelected ? '#162B5B' : isFocused ? '#3260CC' : '#162B5B',\n        paddingLeft: 19,\n        paddingRight: 19\n      }),\n      valueContainer: provided => _objectSpread({}, provided, {\n        height: 52,\n        fontSize: 16,\n        paddingLeft: 19,\n        paddingRight: 19,\n        borderColor: '#CCD3E3'\n      }),\n      container: provided => _objectSpread({}, provided, {\n        fontSize: 16,\n        borderColor: '#CCD3E3'\n      }),\n      control: provided => _objectSpread({}, provided, {\n        borderColor: '#CCD3E3'\n      })\n    };\n\n    switch (this.props.user.status) {\n      case 1:\n        return React.createElement(Step1, {\n          user: this.props.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n\n      case 2:\n        return React.createElement(Step2, {\n          user: this.props.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n\n      case 3:\n        return React.createElement(Step3, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n\n      case 4:\n        return React.createElement(Step4, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"Next?\");\n    }\n  }\n\n}\n\nconst mapState = state => ({\n  currentUser: state.authReducer.currentUser,\n  isLoggedIn: state.authReducer.isLoggedIn,\n  user: state.authReducer.user,\n  errors: state.authReducer.errors,\n  userStatus: state.authReducer.userStatus\n});\n\nconst mapDispatch = dispatch => ({\n  login: data => {\n    dispatch(login(data));\n  },\n  setUserStatus: data => {\n    dispatch(setUserStatus(data));\n  },\n  requestUserData: data => {\n    dispatch(requestUserData(data));\n  }\n});\n\nexport default connect(mapState, mapDispatch)(EmailVerification);","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/components/Auth/ConfirmationTypes/StepsVerification.js"],"names":["React","connect","login","setUserStatus","receiveUserData","requestUserData","icons","Step1","Step2","Step3","Step4","Select","EmailVerification","Component","constructor","props","state","userStatus","isAvailable","user","componentDidMount","userID","render","options","value","label","console","log","customStyles","option","provided","data","isDisabled","isSelected","isFocused","height","backgroundColor","color","paddingLeft","paddingRight","valueContainer","fontSize","borderColor","container","control","status","mapState","currentUser","authReducer","isLoggedIn","errors","mapDispatch","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport {login, setUserStatus, receiveUserData, requestUserData} from \"../../../store/actions\";\nimport * as icons from '../../../assets';\nimport '../index.scss';\nimport Step1 from  './Step/Step1';\nimport Step2 from  './Step/Step2';\nimport Step3 from  './Step/Step3';\nimport Step4 from  './Step/Step4';\nimport Select from 'react-select'\n\nclass EmailVerification extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userStatus: this.props.userStatus,\n            isAvailable: '' || this.props.user.isAvailable\n        };\n    }\n\n    componentDidMount() {\n        this.props.requestUserData(this.props.userID);\n    }\n\n    render() {\n        const options = [\n            { value: 'chocolate', label: 'Chocolate' },\n            { value: 'strawberry', label: 'Strawberry' },\n            { value: 'vanilla', label: 'Vanilla' }\n        ];\n\n        console.log(\">> DATA INFO\", this.props.user);\n\n        const customStyles = {\n            option: (provided, { data, isDisabled, isSelected, isFocused }) => ({\n                ...provided,\n                height: 40,\n                backgroundColor: isDisabled\n                    ? null\n                    : isSelected\n                        ? '#F4F8FF'\n                        : null,\n                color: isSelected ? '#162B5B' : isFocused ? '#3260CC' : '#162B5B',\n                paddingLeft: 19,\n                paddingRight: 19,\n            }),\n            valueContainer: (provided) => ({\n                ...provided,\n                height: 52,\n                fontSize: 16,\n                paddingLeft: 19,\n                paddingRight: 19,\n                borderColor: '#CCD3E3'\n            }),\n            container: (provided) => ({\n                ...provided,\n                fontSize: 16,\n                borderColor: '#CCD3E3'\n            }),\n            control: (provided) => ({\n                ...provided,\n                borderColor: '#CCD3E3',\n            })\n        };\n\n        switch (this.props.user.status) {\n            case 1:\n                return <Step1 user={this.props.user} />;\n            case 2:\n                return <Step2 user={this.props.user} />;\n            case 3:\n                return <Step3 />;\n            case 4:\n                return <Step4 />;\n            default:\n                return <h1>Next?</h1>;\n        }\n    }\n}\n\nconst mapState = (state) => ({\n    currentUser: state.authReducer.currentUser,\n    isLoggedIn: state.authReducer.isLoggedIn,\n    user: state.authReducer.user,\n    errors: state.authReducer.errors,\n    userStatus: state.authReducer.userStatus\n});\n\nconst mapDispatch = (dispatch) => ({\n    login: data => {\n        dispatch(login(data))\n    },\n    setUserStatus: data => {\n        dispatch(setUserStatus(data))\n    },\n    requestUserData: data => {\n        dispatch(requestUserData(data))\n    }\n});\n\n\nexport default connect(mapState, mapDispatch)(EmailVerification)"]},"metadata":{},"sourceType":"module"}