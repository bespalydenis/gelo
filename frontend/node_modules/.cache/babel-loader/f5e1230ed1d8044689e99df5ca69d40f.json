{"ast":null,"code":"import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport { REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN, login, loginSuccess } from '../actions';\nimport axios from 'axios';\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\"; // -------------------------\n\nfunction callLogin(data) {\n  return axios.post('/api/users/login', {\n    email: data.email,\n    password: data.password\n  });\n}\n\nfunction* userLogin(action) {\n  try {\n    let responce = yield call(callLogin, action.data);\n    responce = yield responce.data;\n    console.log('>> responce', responce);\n\n    if (responce) {\n      localStorage.setItem('jwtToken', responce.token);\n      setAuthToken(responce.token);\n      yield put(loginSuccess(responce));\n    } else {\n      console.log('nhr', responce);\n    }\n  } catch (e) {\n    console.log('>> Login Error', e);\n  }\n} // -------------------------\n\n\nfunction fetchUnits(data) {\n  console.log('>> saga units', data);\n  return axios.post('/api/users/units', {\n    userID: data\n  });\n}\n\nfunction* getUsers(action) {\n  console.log('>> getUsers', action.data);\n\n  try {\n    const response = yield call(fetchUnits, action.data);\n    const units = response.data;\n    yield put(receiveUsers(units));\n  } catch (e) {\n    console.log('>> getUsers error', action.data);\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n} // -------------------------\n\n\nfunction callAddNewUser(data) {\n  return axios.post('/api/users/registration', data);\n}\n\nfunction* addNewUser(action) {\n  try {\n    // const response = yield call(fetchUnits, action.data);\n    // const units = response.data;\n    // console.log('>> unitsGet', action, data);\n    // yield put(receiveUsers(units));\n    let response = yield call(callAddNewUser, action.data);\n    response = yield response.data;\n    console.log('>> callAddNewUser', response);\n\n    if (response) {\n      yield put(receiveUsers(''));\n    } // axios.post('/api/users/register', action.data)\n    //     .then(res => {\n    //         console.log('>> addUser', res);\n    //     })\n    //     .catch(errors => {\n    //         if (errors.response) {\n    //            console.log('>> E2');\n    //         } else if (errors.request) {\n    //             console.log('E', errors.request);\n    //         } else {\n    //             console.log('Error', errors.message);\n    //         }\n    //     })\n\n  } catch (e) {\n    yield put(receiveUsers('Test was success! Error!', e, action.data));\n  }\n} // -------------------------\n\n\nfunction* watcher() {\n  yield takeLatest(REQUEST_USERS, getUsers);\n  yield takeLatest(ADD_USER, addNewUser);\n  yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n  yield all([watcher()]);\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/store/saga/index.js"],"names":["takeLatest","all","put","call","REQUEST_USERS","receiveUsers","ADD_USER","addUser","SET_CURRENT_USER","LOGIN","login","loginSuccess","axios","setAuthToken","jwt","callLogin","data","post","email","password","userLogin","action","responce","console","log","localStorage","setItem","token","e","fetchUnits","userID","getUsers","response","units","callAddNewUser","addNewUser","watcher","saga"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport {REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN, login, loginSuccess} from '../actions';\nimport axios from 'axios'\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\";\n\n\n// -------------------------\n\nfunction callLogin(data) {\n    return axios.post('/api/users/login', {email: data.email, password: data.password});\n}\n\nfunction* userLogin(action) {\n    try {\n        let responce = yield call(callLogin, action.data);\n        responce = yield responce.data;\n        console.log('>> responce', responce);\n        if(responce) {\n            localStorage.setItem('jwtToken', responce.token);\n            setAuthToken(responce.token);\n            yield put(loginSuccess(responce))\n        } else {\n            console.log('nhr', responce);\n        }\n    } catch(e) {\n        console.log('>> Login Error', e);\n    }\n}\n\n// -------------------------\n\nfunction fetchUnits(data) {\n    console.log('>> saga units', data);\n    return axios.post('/api/users/units', { userID: data } );\n}\n\nfunction* getUsers(action) {\n    console.log('>> getUsers', action.data);\n    try {\n        const response = yield call(fetchUnits, action.data);\n        const units = response.data;\n        yield put(receiveUsers(units));\n    } catch(e) {\n        console.log('>> getUsers error', action.data);\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n\n// -------------------------\n\nfunction callAddNewUser(data) {\n    return axios.post('/api/users/registration', data);\n}\n\nfunction* addNewUser(action) {\n    try {\n        // const response = yield call(fetchUnits, action.data);\n        // const units = response.data;\n        // console.log('>> unitsGet', action, data);\n        // yield put(receiveUsers(units));\n\n        let response = yield call(callAddNewUser, action.data);\n        response = yield response.data;\n        console.log('>> callAddNewUser', response);\n        if(response) {\n            yield put(receiveUsers(''));\n        }\n\n        // axios.post('/api/users/register', action.data)\n        //     .then(res => {\n        //         console.log('>> addUser', res);\n        //     })\n        //     .catch(errors => {\n        //         if (errors.response) {\n        //            console.log('>> E2');\n        //         } else if (errors.request) {\n        //             console.log('E', errors.request);\n        //         } else {\n        //             console.log('Error', errors.message);\n        //         }\n        //     })\n    } catch(e) {\n        yield put(receiveUsers('Test was success! Error!', e, action.data));\n    }\n}\n\n// -------------------------\n\nfunction* watcher() {\n    yield takeLatest(REQUEST_USERS, getUsers);\n    yield takeLatest(ADD_USER, addNewUser);\n    yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n    yield all([watcher()]);\n}"]},"metadata":{},"sourceType":"module"}