{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/raps/gelo/frontend/src/components/Auth/Confirmation.js\";\nimport React from 'react'; // import { connect } from \"react-redux\";\n\nimport classnames from \"classnames\";\nimport { connect } from 'react-redux';\nimport setAuthToken from '../../utils/setAuthToken';\nimport jwt from 'jsonwebtoken';\nimport { requestUsers, login, requestUserData, setUserStatus } from \"../../store/actions\";\nimport EmailVerification from \"./ConfirmationTypes/EmailVerification\";\nimport StepsVerification from \"./ConfirmationTypes/StepsVerification\";\nimport axios from 'axios';\nimport './index.scss';\n\nclass Confirmation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defineActiveComponent = status => {\n      if (status === 0) {\n        return React.createElement(EmailVerification, {\n          secret: this.props.match.params.secret,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        });\n      } else if (status >= 1 && status <= 4) {\n        console.log('>> defineActiveComponent', status);\n        return React.createElement(StepsVerification, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        });\n      } else {\n        window.location.href = '/';\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.requestUserData(this.props.userID);\n  }\n\n  render() {\n    const errors = this.props.errors;\n    const params = this.props.match;\n    console.log('>> match', params);\n\n    if (this.props.match.params.secret) {\n      const secret = axios.post('/api/users/secret', {\n        email: this.props.user.email\n      });\n      console.log('>> Secret', secret.data, this.props.secret);\n\n      if (secret.data === this.props.secret) {\n        console.log('>> Same');\n        this.props.setUserStatus({\n          id: this.props.userID,\n          status: 1\n        });\n      } else {\n        console.log('>> Not Same', secret.data);\n      }\n    }\n\n    return React.createElement(\"section\", {\n      className: \"auth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cols\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col col1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col col2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"authForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.defineActiveComponent(this.props.userStatus))))));\n  }\n\n}\n\nconst mapState = state => ({\n  currentUser: state.authReducer.currentUser,\n  isLoggedIn: state.authReducer.isLoggedIn,\n  user: state.authReducer.user,\n  userStatus: state.authReducer.userStatus,\n  errors: state.authReducer.errors,\n  userID: state.authReducer.userID\n});\n\nconst mapDispatch = dispatch => ({\n  login: data => {\n    dispatch(login(data));\n  },\n  requestUserData: data => {\n    dispatch(requestUserData(data));\n  },\n  setUserStatus: data => {\n    dispatch(setUserStatus(data));\n  }\n});\n\nexport default connect(mapState, mapDispatch)(Confirmation);","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/components/Auth/Confirmation.js"],"names":["React","classnames","connect","setAuthToken","jwt","requestUsers","login","requestUserData","setUserStatus","EmailVerification","StepsVerification","axios","Confirmation","Component","constructor","props","defineActiveComponent","status","match","params","secret","console","log","window","location","href","componentDidMount","userID","render","errors","post","email","user","data","id","userStatus","mapState","state","currentUser","authReducer","isLoggedIn","mapDispatch","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,YAAR,EAAsBC,KAAtB,EAA6BC,eAA7B,EAA8CC,aAA9C,QAAkE,qBAAlE;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;;AAEA,MAAMC,YAAN,SAA2BZ,KAAK,CAACa,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,qBARmB,GAQMC,MAAD,IAAY;AAChC,UAAIA,MAAM,KAAK,CAAf,EAAkB;AACd,eAAO,oBAAC,iBAAD;AAAmB,UAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFD,MAEO,IAAIH,MAAM,IAAI,CAAV,IAAeA,MAAM,IAAI,CAA7B,EAAgC;AACnCI,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCL,MAAxC;AACA,eAAO,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAHM,MAGA;AACHM,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,KAjBkB;AAElB;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKX,KAAL,CAAWR,eAAX,CAA2B,KAAKQ,KAAL,CAAWY,MAAtC;AACH;;AAaDC,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,GAAG,KAAKd,KAAL,CAAWc,MAA1B;AAEA,UAAMV,MAAM,GAAG,KAAKJ,KAAL,CAAWG,KAA1B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,MAAxB;;AAEA,QAAG,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,MAA3B,EAAmC;AAC/B,YAAMA,MAAM,GAAGT,KAAK,CAACmB,IAAN,CAAW,mBAAX,EAAgC;AAAEC,QAAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBD;AAAzB,OAAhC,CAAf;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAM,CAACa,IAAhC,EAAsC,KAAKlB,KAAL,CAAWK,MAAjD;;AACA,UAAGA,MAAM,CAACa,IAAP,KAAgB,KAAKlB,KAAL,CAAWK,MAA9B,EAAsC;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,aAAKP,KAAL,CAAWP,aAAX,CAA0B;AAAE0B,UAAAA,EAAE,EAAE,KAAKnB,KAAL,CAAWY,MAAjB;AAAyBV,UAAAA,MAAM,EAAE;AAAjC,SAA1B;AACH,OAHD,MAGO;AACHI,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAAM,CAACa,IAAlC;AACH;AACJ;;AAED,WACI;AAAS,MAAA,SAAS,EAAE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAII;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKjB,qBAAL,CAA4B,KAAKD,KAAL,CAAWoB,UAAvC,CADL,CADJ,CAJJ,CADJ,CADJ,CADJ;AAgBH;;AArDsC;;AAwD3C,MAAMC,QAAQ,GAAIC,KAAD,KAAY;AACzBC,EAAAA,WAAW,EAAED,KAAK,CAACE,WAAN,CAAkBD,WADN;AAEzBE,EAAAA,UAAU,EAAEH,KAAK,CAACE,WAAN,CAAkBC,UAFL;AAGzBR,EAAAA,IAAI,EAAEK,KAAK,CAACE,WAAN,CAAkBP,IAHC;AAIzBG,EAAAA,UAAU,EAAEE,KAAK,CAACE,WAAN,CAAkBJ,UAJL;AAKzBN,EAAAA,MAAM,EAAEQ,KAAK,CAACE,WAAN,CAAkBV,MALD;AAMzBF,EAAAA,MAAM,EAAEU,KAAK,CAACE,WAAN,CAAkBZ;AAND,CAAZ,CAAjB;;AASA,MAAMc,WAAW,GAAIC,QAAD,KAAe;AAC/BpC,EAAAA,KAAK,EAAE2B,IAAI,IAAI;AACXS,IAAAA,QAAQ,CAACpC,KAAK,CAAC2B,IAAD,CAAN,CAAR;AACH,GAH8B;AAI/B1B,EAAAA,eAAe,EAAE0B,IAAI,IAAI;AACrBS,IAAAA,QAAQ,CAACnC,eAAe,CAAC0B,IAAD,CAAhB,CAAR;AACH,GAN8B;AAO/BzB,EAAAA,aAAa,EAAEyB,IAAI,IAAI;AACnBS,IAAAA,QAAQ,CAAClC,aAAa,CAACyB,IAAD,CAAd,CAAR;AACH;AAT8B,CAAf,CAApB;;AAaA,eAAe/B,OAAO,CAACkC,QAAD,EAAWK,WAAX,CAAP,CAA+B7B,YAA/B,CAAf","sourcesContent":["import React from 'react'\n// import { connect } from \"react-redux\";\nimport classnames from \"classnames\"\nimport { connect } from 'react-redux';\nimport setAuthToken from '../../utils/setAuthToken';\nimport jwt from 'jsonwebtoken';\nimport {requestUsers, login, requestUserData, setUserStatus} from \"../../store/actions\";\nimport EmailVerification from \"./ConfirmationTypes/EmailVerification\";\nimport StepsVerification from \"./ConfirmationTypes/StepsVerification\";\nimport axios from 'axios';\nimport './index.scss';\n\nclass Confirmation extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.requestUserData(this.props.userID);\n    }\n\n    defineActiveComponent = (status) => {\n        if (status === 0) {\n            return <EmailVerification secret={this.props.match.params.secret} />;\n        } else if (status >= 1 && status <= 4) {\n            console.log('>> defineActiveComponent', status);\n            return <StepsVerification />;\n        } else {\n            window.location.href = '/';\n        }\n    };\n\n    render() {\n        const errors = this.props.errors;\n\n        const params = this.props.match;\n        console.log('>> match', params);\n\n        if(this.props.match.params.secret) {\n            const secret = axios.post('/api/users/secret', { email: this.props.user.email });\n            console.log('>> Secret', secret.data, this.props.secret);\n            if(secret.data === this.props.secret) {\n                console.log('>> Same');\n                this.props.setUserStatus( { id: this.props.userID, status: 1 })\n            } else {\n                console.log('>> Not Same', secret.data);\n            }\n        }\n\n        return (\n            <section className={\"auth\"}>\n                <div className=\"wr\">\n                    <div className=\"cols\">\n                        <div className=\"col col1\">\n\n                        </div>\n                        <div className=\"col col2\">\n                            <div className=\"authForm\">\n                                {this.defineActiveComponent( this.props.userStatus )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nconst mapState = (state) => ({\n    currentUser: state.authReducer.currentUser,\n    isLoggedIn: state.authReducer.isLoggedIn,\n    user: state.authReducer.user,\n    userStatus: state.authReducer.userStatus,\n    errors: state.authReducer.errors,\n    userID: state.authReducer.userID\n});\n\nconst mapDispatch = (dispatch) => ({\n    login: data => {\n        dispatch(login(data))\n    },\n    requestUserData: data => {\n        dispatch(requestUserData(data))\n    },\n    setUserStatus: data => {\n        dispatch(setUserStatus(data))\n    }\n});\n\n\nexport default connect(mapState, mapDispatch)(Confirmation)"]},"metadata":{},"sourceType":"module"}