{"ast":null,"code":"import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport { REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN } from '../actions';\nimport axios from 'axios';\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\"; // function* getUsers(action) {\n//     try {\n//         console.log('>> getUsers');\n//     } catch (err) {\n//         console.log('>> err', err)\n//     }\n// }\n// LOGIN + AUTH TOKEN\n\nfunction* userLogin(action) {\n  console.log('>> LOGIN SAGA', action);\n\n  try {\n    let result;\n    axios.post('/api/users/login', {\n      email: action.data.email,\n      password: action.data.password\n    }).then(res => {\n      localStorage.setItem('jwtToken', res.data.token);\n      setAuthToken(res.data.token);\n      console.log('>> Login ID', res);\n    }).catch(err => {\n      console.log('>>', err);\n    });\n    console.log('>> RESULT SAGA', result);\n  } catch (e) {\n    console.log('>> Login Error', e);\n  }\n}\n\nfunction fetchUnits(data) {\n  console.log('>>I', data); // return axios({\n  //    method: 'get',\n  //    url: '/api/users/units',\n  //     params: data\n  // });\n\n  let result = [];\n  axios.get('/api/users/units', data).then(data => {\n    console.log('>> Success', data);\n    result = data;\n  }).catch(e => {\n    console.log('>> Error', e);\n  });\n  return result;\n}\n\nfunction* getUsers(action) {\n  try {\n    const response = yield call(fetchUnits, action.data);\n    const units = response.data;\n    yield put(receiveUsers(units));\n  } catch (e) {\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n}\n\nfunction* addNewUser(action) {\n  console.log('>> ANU');\n\n  try {\n    // const response = yield call(fetchUnits, action.data);\n    // const units = response.data;\n    // console.log('>> unitsGet', action, data);\n    // yield put(receiveUsers(units));\n    axios.post('/api/users/register', action.data).then(res => {\n      console.log('>> addUser', res);\n    }).catch(errors => {\n      if (errors.response) {\n        console.log('>> E2');\n      } else if (errors.request) {\n        console.log('E', errors.request);\n      } else {\n        console.log('Error', errors.message);\n      }\n    });\n  } catch (e) {\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n}\n\nfunction* watcher() {\n  yield takeLatest(REQUEST_USERS, getUsers);\n  yield takeLatest(ADD_USER, addNewUser);\n  yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n  yield all([watcher()]);\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/store/saga/index.js"],"names":["takeLatest","all","put","call","REQUEST_USERS","receiveUsers","ADD_USER","addUser","SET_CURRENT_USER","LOGIN","axios","setAuthToken","jwt","userLogin","action","console","log","result","post","email","data","password","then","res","localStorage","setItem","token","catch","err","e","fetchUnits","get","getUsers","response","units","addNewUser","errors","request","message","watcher","saga"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport {REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN} from '../actions';\nimport axios from 'axios'\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\";\n\n// function* getUsers(action) {\n//     try {\n//         console.log('>> getUsers');\n//     } catch (err) {\n//         console.log('>> err', err)\n//     }\n// }\n\n// LOGIN + AUTH TOKEN\nfunction* userLogin(action) {\n    console.log('>> LOGIN SAGA', action);\n    try {\n        let result;\n        axios.post('/api/users/login', {email: action.data.email, password: action.data.password})\n            .then(res => {\n                localStorage.setItem('jwtToken', res.data.token);\n                setAuthToken(res.data.token);\n                console.log('>> Login ID', res);\n            })\n            .catch(err => {\n                console.log('>>',err)\n            })\n        console.log('>> RESULT SAGA', result);\n    } catch(e) {\n        console.log('>> Login Error', e);\n    }\n}\n\nfunction fetchUnits(data) {\n    console.log('>>I', data);\n    // return axios({\n    //    method: 'get',\n    //    url: '/api/users/units',\n    //     params: data\n    // });\n\n    let result = [];\n\n    axios.get('/api/users/units', data).then(data => {\n        console.log('>> Success', data);\n        result = data;\n    }).catch(e => {\n       console.log('>> Error', e);\n    });\n\n    return result;\n}\n\nfunction* getUsers(action) {\n    try {\n        const response = yield call(fetchUnits, action.data);\n        const units = response.data;\n        yield put(receiveUsers(units));\n    } catch(e) {\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n\nfunction* addNewUser(action) {\n    console.log('>> ANU');\n    try {\n        // const response = yield call(fetchUnits, action.data);\n        // const units = response.data;\n        // console.log('>> unitsGet', action, data);\n        // yield put(receiveUsers(units));\n\n        axios.post('/api/users/register', action.data)\n            .then(res => {\n                console.log('>> addUser', res);\n            })\n            .catch(errors => {\n                if (errors.response) {\n                   console.log('>> E2');\n                } else if (errors.request) {\n                    console.log('E', errors.request);\n                } else {\n                    console.log('Error', errors.message);\n                }\n            })\n    } catch(e) {\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n\n\nfunction* watcher() {\n    yield takeLatest(REQUEST_USERS, getUsers);\n    yield takeLatest(ADD_USER, addNewUser);\n    yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n    yield all([watcher()]);\n}"]},"metadata":{},"sourceType":"module"}