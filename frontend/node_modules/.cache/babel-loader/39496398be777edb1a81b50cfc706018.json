{"ast":null,"code":"import _objectSpread from \"/Applications/MAMP/htdocs/raps/gelo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { takeLatest, all, put, call } from 'redux-saga/effects';\nimport { REQUEST_USERS, ADD_USER, LOGIN, LOGOUT, UPDATE_USER, SET_USER_STATUS, RECEIVE_USER_DATA, REQUEST_USER_DATA, receiveUsers, login, loginSuccess, loginError, receiveUserData, addUserError, setUserStatusSuccess } from '../actions';\nimport axios from 'axios';\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\"; // -------------------------\n\nfunction fetchUnits(data) {\n  return axios.post('/api/users/units', {\n    userID: data\n  });\n}\n\nfunction* getUsers(action) {\n  console.log('>> getUsers', action.data);\n\n  try {\n    const response = yield call(fetchUnits, action.data);\n    const units = response.data;\n    yield put(receiveUsers(units));\n  } catch (e) {\n    console.log('>> getUsers error', action.data);\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n} // -------------------------\n// -------------------------\n\n\nfunction callSetUserStatus(data) {\n  console.log('>> CSUS', data);\n  axios.post('/api/users/updateStatus', {\n    id: data.id,\n    status: data.status\n  }).then(res => {\n    console.log('>> gooood');\n  }).catch(error => {\n    console.log('>> baad', error);\n  });\n}\n\nfunction* userStatus(action) {\n  console.log('>> userStatus', action.data);\n\n  try {\n    const responce = yield call(callSetUserStatus, action.data);\n    console.log('>> resp', responce); //yield put(userStatusUpdated(action.data));\n\n    const responceInfo = yield call(callCurrentUserData, action.data.id);\n\n    if (responceInfo) {\n      yield put(setUserStatusSuccess(responceInfo));\n    }\n  } catch (e) {\n    console.log('>> User Status', e);\n  }\n} // -------------------------\n// -------------------------\n\n\nfunction callAddNewUser(newUser) {\n  return axios.post('/api/users/register', newUser);\n}\n\nfunction* addNewUser(action) {\n  try {\n    const responce = yield call(callAddNewUser, action.data);\n    const loginData = {\n      email: responce.data.email,\n      password: action.data.password\n    };\n    let updatedResponce = {\n      errors: _objectSpread({}, responce.data.errors, {\n        meta: {\n          email: action.data.email,\n          firstName: action.data.firstName,\n          lastName: action.data.lastName\n        }\n      })\n    };\n\n    if (responce && responce.data.errors) {\n      yield put(addUserError(updatedResponce));\n    } else if (responce) {\n      yield put(login(loginData));\n    }\n\n    console.log('>> ANU', responce.data.errors);\n  } catch (e) {\n    console.log(e);\n  }\n} // -------------------------\n// -------------------------\n\n\nfunction callLogin(data) {\n  return axios.post('/api/users/login', {\n    email: data.email,\n    password: data.password\n  });\n}\n\nfunction* userLogin(action) {\n  try {\n    let responce = yield call(callLogin, action.data);\n    responce = yield responce.data;\n\n    if (responce && responce.errors) {\n      yield put(loginError(responce));\n    } else if (responce) {\n      let responceInfo = {\n        token: responce.token,\n        user: {}\n      };\n      localStorage.setItem('jwtToken', responce.token);\n      setAuthToken(responce.token);\n      let tokenInfo = jwt_decode(responceInfo.token);\n      responceInfo.user = yield call(callCurrentUserData, tokenInfo.id);\n\n      if (responceInfo.user) {\n        yield put(loginSuccess(responceInfo));\n      }\n    } else {\n      console.log('nhr', responce);\n    }\n  } catch (e) {\n    console.log('>> Login Error', e);\n  }\n} // -------------------------\n// -------------------------\n\n\nfunction* logout() {\n  try {\n    localStorage.removeItem('jwtToken');\n    setAuthToken(false);\n  } catch (e) {}\n}\n\nfunction updateUserDataPost(data) {\n  return axios.post('/api/users/edit', data).then(res => {\n    console.log('i');\n  }).catch(err => {\n    console.log('ii');\n  });\n}\n\nfunction* updateUserData(action) {\n  console.log('>> changeUser', action.data.meta, action.data.userID);\n\n  try {\n    const response = yield call(updateUserDataPost, action.data);\n    yield put(receiveUsers(action.data.userID));\n  } catch (e) {\n    console.log('ii');\n  }\n}\n\nfunction callCurrentUserData(data) {\n  return axios.post('/api/users/user', {\n    id: data\n  });\n}\n\nfunction* currentUserData(action) {\n  try {\n    const responce = yield call(callCurrentUserData, action.data);\n    console.log('>> responce CUD', responce.data, responce.data.status);\n    yield put(receiveUserData(responce.data));\n  } catch (e) {\n    console.log('>> currentUserData ERROR', action);\n  }\n} // ------------------------- // ------------------------- // -------------------------\n\n\nfunction* watcher() {\n  yield takeLatest(REQUEST_USERS, getUsers);\n  yield takeLatest(ADD_USER, addNewUser);\n  yield takeLatest(LOGIN, userLogin);\n  yield takeLatest(LOGOUT, logout);\n  yield takeLatest(UPDATE_USER, updateUserData);\n  yield takeLatest(SET_USER_STATUS, userStatus);\n  yield takeLatest(REQUEST_USER_DATA, currentUserData);\n}\n\nexport default function* saga() {\n  yield all([watcher()]);\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/store/saga/index.js"],"names":["takeLatest","all","put","call","REQUEST_USERS","ADD_USER","LOGIN","LOGOUT","UPDATE_USER","SET_USER_STATUS","RECEIVE_USER_DATA","REQUEST_USER_DATA","receiveUsers","login","loginSuccess","loginError","receiveUserData","addUserError","setUserStatusSuccess","axios","setAuthToken","jwt_decode","fetchUnits","data","post","userID","getUsers","action","console","log","response","units","e","callSetUserStatus","id","status","then","res","catch","error","userStatus","responce","responceInfo","callCurrentUserData","callAddNewUser","newUser","addNewUser","loginData","email","password","updatedResponce","errors","meta","firstName","lastName","callLogin","userLogin","token","user","localStorage","setItem","tokenInfo","logout","removeItem","updateUserDataPost","err","updateUserData","currentUserData","watcher","saga"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport {\n    REQUEST_USERS,\n    ADD_USER,\n    LOGIN,\n    LOGOUT,\n    UPDATE_USER,\n    SET_USER_STATUS,\n    RECEIVE_USER_DATA,\n    REQUEST_USER_DATA,\n    receiveUsers,\n    login,\n    loginSuccess,\n    loginError, receiveUserData,addUserError, setUserStatusSuccess\n} from '../actions';\nimport axios from 'axios'\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\n\n// -------------------------\nfunction fetchUnits(data) {\n    return axios.post('/api/users/units', { userID: data } );\n}\n\nfunction* getUsers(action) {\n    console.log('>> getUsers', action.data);\n    try {\n        const response = yield call(fetchUnits, action.data);\n        const units = response.data;\n        yield put(receiveUsers(units));\n    } catch(e) {\n        console.log('>> getUsers error', action.data);\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n// -------------------------\n\n\n// -------------------------\nfunction callSetUserStatus(data) {\n    console.log('>> CSUS', data);\n    axios.post('/api/users/updateStatus', { id: data.id, status: data.status }).then(res => {\n        console.log('>> gooood');\n    }).catch(error => {\n        console.log('>> baad', error);\n    });\n}\n\nfunction* userStatus(action) {\n    console.log('>> userStatus', action.data);\n    try {\n        const responce = yield call(callSetUserStatus, action.data);\n        console.log('>> resp', responce);\n        //yield put(userStatusUpdated(action.data));\n\n        const responceInfo = yield call(callCurrentUserData, action.data.id);\n        if(responceInfo) {\n            yield put(setUserStatusSuccess(responceInfo))\n        }\n    } catch(e) {\n        console.log('>> User Status', e);\n    }\n}\n// -------------------------\n\n// -------------------------\nfunction callAddNewUser(newUser) {\n    return axios.post('/api/users/register', newUser)\n}\n\nfunction* addNewUser(action) {\n    try {\n        const responce = yield call(callAddNewUser, action.data);\n        const loginData = {\n            email: responce.data.email,\n            password: action.data.password\n        };\n\n        let updatedResponce = {\n            errors: {\n                ...responce.data.errors,\n                meta: {\n                    email: action.data.email,\n                    firstName: action.data.firstName,\n                    lastName: action.data.lastName,\n                }\n            }\n        };\n\n        if (responce && responce.data.errors) {\n            yield put(addUserError(updatedResponce))\n        } else if (responce) {\n            yield put(login(loginData));\n        }\n        console.log('>> ANU', (responce.data.errors));\n    } catch(e) {\n        console.log(e);\n    }\n}\n// -------------------------\n\n// -------------------------\nfunction callLogin(data) {\n    return axios.post('/api/users/login', {email: data.email, password: data.password});\n}\n\nfunction* userLogin(action) {\n    try {\n        let responce = yield call(callLogin, action.data);\n        responce = yield responce.data;\n        if(responce && responce.errors) {\n            yield put(loginError(responce));\n        } else if (responce) {\n            let responceInfo = {\n                token: responce.token,\n                user: {}\n            };\n            localStorage.setItem('jwtToken', responce.token);\n            setAuthToken(responce.token);\n\n            let tokenInfo = jwt_decode(responceInfo.token);\n\n            responceInfo.user = yield call(callCurrentUserData, tokenInfo.id);\n            if(responceInfo.user) {\n                yield put(loginSuccess(responceInfo))\n            }\n        } else {\n            console.log('nhr', responce);\n        }\n    } catch(e) {\n        console.log('>> Login Error', e);\n    }\n}\n// -------------------------\n\n// -------------------------\nfunction* logout() {\n    try {\n        localStorage.removeItem('jwtToken');\n        setAuthToken(false);\n    } catch(e) {\n\n    }\n}\n\nfunction updateUserDataPost(data) {\n    return axios.post('/api/users/edit', data)\n        .then(res => {\n            console.log('i');\n        })\n        .catch(err => {\n            console.log('ii');\n        });\n}\n\nfunction* updateUserData(action) {\n    console.log('>> changeUser', action.data.meta, action.data.userID);\n    try {\n        const response = yield call(updateUserDataPost, action.data);\n        yield put(receiveUsers(action.data.userID));\n    } catch(e) {\n        console.log('ii');\n    }\n}\n\nfunction callCurrentUserData(data) {\n    return axios.post('/api/users/user', { id: data });\n}\n\nfunction* currentUserData(action) {\n    try {\n        const responce = yield call(callCurrentUserData, action.data);\n        console.log('>> responce CUD', responce.data, responce.data.status);\n        yield put(receiveUserData(responce.data));\n    } catch(e) {\n        console.log('>> currentUserData ERROR', action);\n    }\n}\n\n\n\n// ------------------------- // ------------------------- // -------------------------\n\nfunction* watcher() {\n    yield takeLatest(REQUEST_USERS, getUsers);\n    yield takeLatest(ADD_USER, addNewUser);\n    yield takeLatest(LOGIN, userLogin);\n    yield takeLatest(LOGOUT, logout);\n    yield takeLatest(UPDATE_USER, updateUserData);\n    yield takeLatest(SET_USER_STATUS, userStatus);\n    yield takeLatest(REQUEST_USER_DATA, currentUserData);\n}\n\nexport default function* saga() {\n    yield all([watcher()]);\n}"]},"metadata":{},"sourceType":"module"}