{"ast":null,"code":"import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport { REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN } from '../actions';\nimport axios from 'axios';\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\"; // function* getUsers(action) {\n//     try {\n//         console.log('>> getUsers');\n//     } catch (err) {\n//         console.log('>> err', err)\n//     }\n// }\n// LOGIN + AUTH TOKEN\n\nfunction callLogin(data) {\n  let result = {};\n  axios.post('/api/users/login', {\n    email: data.email,\n    password: data.password\n  }).then(res => {\n    localStorage.setItem('jwtToken', res.data.token);\n    setAuthToken(res.data.token);\n    console.log('>> Login ID', res);\n    result = res;\n  }).catch(err => {\n    console.log('>>', err);\n  });\n  return result;\n}\n\nfunction* userLogin(action) {\n  try {\n    const responce = yield call(callLogin, action.data);\n    console.log('>>>> RESPONCE', responce);\n  } catch (e) {\n    console.log('>> Login Error', e);\n  }\n}\n\nfunction fetchUnits(data) {\n  let result = [];\n  axios.get('/api/users/units', data).then(data => {\n    console.log('>> Success', data);\n    result = data;\n  }).catch(e => {\n    console.log('>> Error', e);\n  });\n  return result;\n}\n\nfunction* getUsers(action) {\n  try {\n    const response = yield call(fetchUnits, action.data);\n    const units = response.data;\n    yield put(receiveUsers(units));\n  } catch (e) {\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n}\n\nfunction* addNewUser(action) {\n  console.log('>> ANU');\n\n  try {\n    // const response = yield call(fetchUnits, action.data);\n    // const units = response.data;\n    // console.log('>> unitsGet', action, data);\n    // yield put(receiveUsers(units));\n    axios.post('/api/users/register', action.data).then(res => {\n      console.log('>> addUser', res);\n    }).catch(errors => {\n      if (errors.response) {\n        console.log('>> E2');\n      } else if (errors.request) {\n        console.log('E', errors.request);\n      } else {\n        console.log('Error', errors.message);\n      }\n    });\n  } catch (e) {\n    yield put(receiveUsers('Test was success! Error!'));\n  }\n}\n\nfunction* watcher() {\n  yield takeLatest(REQUEST_USERS, getUsers);\n  yield takeLatest(ADD_USER, addNewUser);\n  yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n  yield all([watcher()]);\n}","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/store/saga/index.js"],"names":["takeLatest","all","put","call","REQUEST_USERS","receiveUsers","ADD_USER","addUser","SET_CURRENT_USER","LOGIN","axios","setAuthToken","jwt","callLogin","data","result","post","email","password","then","res","localStorage","setItem","token","console","log","catch","err","userLogin","action","responce","e","fetchUnits","get","getUsers","response","units","addNewUser","errors","request","message","watcher","saga"],"mappings":"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","sourcesContent":["import { takeLatest, all, put, call } from 'redux-saga/effects';\nimport {REQUEST_USERS, receiveUsers, ADD_USER, addUser, SET_CURRENT_USER, LOGIN} from '../actions';\nimport axios from 'axios'\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt from \"jsonwebtoken\";\n\n// function* getUsers(action) {\n//     try {\n//         console.log('>> getUsers');\n//     } catch (err) {\n//         console.log('>> err', err)\n//     }\n// }\n\n// LOGIN + AUTH TOKEN\nfunction callLogin(data) {\n    let result = {};\n    axios.post('/api/users/login', {email: data.email, password: data.password})\n        .then(res => {\n            localStorage.setItem('jwtToken', res.data.token);\n            setAuthToken(res.data.token);\n            console.log('>> Login ID', res);\n            result = res;\n        })\n        .catch(err => {\n            console.log('>>',err)\n        });\n    return result;\n}\n\nfunction* userLogin(action) {\n    try {\n        const responce = yield call(callLogin, action.data);\n        console.log('>>>> RESPONCE', responce);\n    } catch(e) {\n        console.log('>> Login Error', e);\n    }\n}\n\nfunction fetchUnits(data) {\n    let result = [];\n\n    axios.get('/api/users/units', data).then(data => {\n        console.log('>> Success', data);\n        result = data;\n    }).catch(e => {\n       console.log('>> Error', e);\n    });\n\n    return result;\n}\n\nfunction* getUsers(action) {\n    try {\n        const response = yield call(fetchUnits, action.data);\n        const units = response.data;\n        yield put(receiveUsers(units));\n    } catch(e) {\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n\nfunction* addNewUser(action) {\n    console.log('>> ANU');\n    try {\n        // const response = yield call(fetchUnits, action.data);\n        // const units = response.data;\n        // console.log('>> unitsGet', action, data);\n        // yield put(receiveUsers(units));\n\n        axios.post('/api/users/register', action.data)\n            .then(res => {\n                console.log('>> addUser', res);\n            })\n            .catch(errors => {\n                if (errors.response) {\n                   console.log('>> E2');\n                } else if (errors.request) {\n                    console.log('E', errors.request);\n                } else {\n                    console.log('Error', errors.message);\n                }\n            })\n    } catch(e) {\n        yield put(receiveUsers('Test was success! Error!'));\n    }\n}\n\n\nfunction* watcher() {\n    yield takeLatest(REQUEST_USERS, getUsers);\n    yield takeLatest(ADD_USER, addNewUser);\n    yield takeLatest(LOGIN, userLogin);\n}\n\nexport default function* saga() {\n    yield all([watcher()]);\n}"]},"metadata":{},"sourceType":"module"}