{"ast":null,"code":"import _objectWithoutProperties from \"/Applications/MAMP/htdocs/raps/gelo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Applications/MAMP/htdocs/raps/gelo/frontend/src/utils/checkAuth.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nexport default function PrivateRoute(_ref) {\n  let Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => rest.isLoggedIn ? React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: '/login',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }));\n}\n; //( <Redirect to={{ pathname: '/login', state: {from: props.location} }} /> )","map":{"version":3,"sources":["/Applications/MAMP/htdocs/raps/gelo/frontend/src/utils/checkAuth.js"],"names":["React","Route","Redirect","PrivateRoute","Component","component","rest","props","isLoggedIn"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,eAAe,SAASC,YAAT,OAAyD;AAAA,MAAtBC,SAAsB,QAAjCC,SAAiC;AAAA,MAARC,IAAQ;;AACpE,SACI,oBAAC,KAAD,oBACQA,IADR;AAEI,IAAA,MAAM,EAAEC,KAAK,IACTD,IAAI,CAACE,UAAL,GAAoB,oBAAC,SAAD,oBAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB,GAAiD,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAQH;AAAA,C,CAED","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={props => (\n                rest.isLoggedIn ? ( <Component {...props} /> ) : <Redirect to={'/login'}/> )\n            }\n        />\n    );\n};\n\n//( <Redirect to={{ pathname: '/login', state: {from: props.location} }} /> )"]},"metadata":{},"sourceType":"module"}